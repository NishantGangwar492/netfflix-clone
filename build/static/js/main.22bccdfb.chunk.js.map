{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrormovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgrounPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22bccdfb.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\"\r\nimport YouTube from \"react-youtube\"\r\nimport movieTrailer from \"movie-trailer\"\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nexport default function Row({ title, fetchUrl, isLargeRow }) {\r\n\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        //if [], run once when the row loads and dont run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n    const opts = {\r\n        height: \"390\",\r\n        width : \"100%\",\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    }\r\n   \r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl){\r\n        setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                const urlParams =new URLSearchParams( new URL(url).search)\r\n              setTrailerUrl( urlParams.get('v'));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <h2>{title}</h2>\r\n        {/*  */}\r\n        <div className=\"row__posters\">\r\n          {movies.map((movie) => (\r\n            <img\r\n              key={movie.id}\r\n              onClick={()=> handleClick(movie)}\r\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n              src={`${base_url}${\r\n                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.name}\r\n            />\r\n          ))}\r\n        </div>\r\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n      </div>\r\n    );\r\n}\r\n","const API_KEY = '90721bcca44368ac8cb39ed9f31e7fbf';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrormovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\"\r\nimport { func } from \"prop-types\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n\r\n  function truncate(str, n){\r\n      return str?.length > n ? str.substr(0, n - 1) + \"...\": str;\r\n  }\r\n  \r\n  return (\r\n    <header className= \"banner\"\r\n    style={{\r\n        backgroundSize: 'cover',\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgrounPosition: \"center center\",\r\n    }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/* title */}\r\n        <h1 className=\"banner__title\">\r\n            {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n            <button className=\"banner__button\">Play</button>\r\n            <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n            {truncate(movie?.overview, 150)}\r\n        </h1>\r\n        {/* div>2 button */}\r\n        {/* description */}\r\n      </div>\r\n      <div className=\"banner--fadebottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, {useState, useEffect} from 'react'\r\nimport \"./Nav.css\"\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () =>{\r\n          if  (window.scrollY > 100){\r\n            handleShow(true);\r\n          } else handleShow(false);\r\n        });\r\n        return ()=>{\r\n          window.removeEventListener(\"scroll\");\r\n        }\r\n      \r\n    }, []);\r\n\r\n\r\n    return (\r\n      <div className={`nav ${show && \"nav__black\"}`}>\r\n        <img\r\n          className=\"nav__logo\"\r\n          src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"netflix logo\"\r\n        />\r\n        <img\r\n          className=\"nav__avatar\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n          alt=\"netflix avatar\"\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React, {Component} from 'react';\nimport \"./App.css\"\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from \"./Banner\"\nimport Nav from \"./Nav\"\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow\n      />       \n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />         \n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />         \n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />         \n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrormovies} />         \n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />         \n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />         \n      \n       \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}